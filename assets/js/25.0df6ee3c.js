(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{386:function(t,a,s){"use strict";s.r(a);var r=s(42),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"知识点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#知识点"}},[t._v("#")]),t._v(" 知识点")]),t._v(" "),s("h2",{attrs:{id:"目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#目录"}},[t._v("目录")])]),s("li",[s("a",{attrs:{href:"#多线程"}},[t._v("多线程")]),s("ul",[s("li",[s("a",{attrs:{href:"#进程和线程"}},[t._v("进程和线程")])]),s("li",[s("a",{attrs:{href:"#多进程和多线程"}},[t._v("多进程和多线程")])]),s("li",[s("a",{attrs:{href:"#多线程优缺点"}},[t._v("多线程优缺点")])]),s("li",[s("a",{attrs:{href:"#任务和队列"}},[t._v("任务和队列")])]),s("li",[s("a",{attrs:{href:"#gcd"}},[t._v("GCD")])]),s("li",[s("a",{attrs:{href:"#nsthread"}},[t._v("NSThread")])]),s("li",[s("a",{attrs:{href:"#nsopertion"}},[t._v("NSOpertion")])]),s("li",[s("a",{attrs:{href:"#对比-ios-中的多线程技术"}},[t._v("对比 iOS 中的多线程技术")])]),s("li",[s("a",{attrs:{href:"#"}})])])]),s("li",[s("a",{attrs:{href:"#网络"}},[t._v("网络")]),s("ul",[s("li",[s("a",{attrs:{href:"#http-和-https"}},[t._v("HTTP 和  HTTPS")])]),s("li",[s("a",{attrs:{href:"#tcp-和-udp"}},[t._v("TCP 和 UDP")])]),s("li",[s("a",{attrs:{href:"#三次握手和四次挥手"}},[t._v("三次握手和四次挥手")])])])]),s("li",[s("a",{attrs:{href:"#ios-中的加密"}},[t._v("iOS 中的加密")]),s("ul",[s("li",[s("a",{attrs:{href:"#base64编码"}},[t._v("Base64编码")])]),s("li",[s("a",{attrs:{href:"#对称加密"}},[t._v("对称加密")])]),s("li",[s("a",{attrs:{href:"#非对称加密"}},[t._v("非对称加密")])]),s("li",[s("a",{attrs:{href:"#哈希算法加密"}},[t._v("哈希算法加密")])]),s("li",[s("a",{attrs:{href:"#nsarray-与-nsset-的区别"}},[t._v("NSArray 与 NSSet 的区别")])]),s("li",[s("a",{attrs:{href:"#nshashtable-与-nsmaptable-的区别"}},[t._v("NSHashTable 与 NSMapTable 的区别")])]),s("li",[s("a",{attrs:{href:"#属性关键字"}},[t._v("属性关键字")])]),s("li",[s("a",{attrs:{href:"#arc-默认的关键字"}},[t._v("ARC 默认的关键字")])]),s("li",[s("a",{attrs:{href:"#什么情况下使用-weak-关键字"}},[t._v("什么情况下使用 weak 关键字？")])]),s("li",[s("a",{attrs:{href:"#可能出现循环引用的地方有哪些"}},[t._v("可能出现循环引用的地方有哪些？")])]),s("li",[s("a",{attrs:{href:"#weak-跟-assign-的区别"}},[t._v("weak 跟 assign 的区别")])])])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"多线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[t._v("#")]),t._v(" 多线程")]),t._v(" "),s("h3",{attrs:{id:"进程和线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[t._v("#")]),t._v(" 进程和线程")]),t._v(" "),s("h4",{attrs:{id:"进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[t._v("#")]),t._v(" 进程")]),t._v(" "),s("ul",[s("li",[t._v("进程是操作系统进行资源分配（CPU、内存、硬盘io等）的最小单位。")]),t._v(" "),s("li",[t._v("进程是指在系统中正在运行的一个应用程序。每个进程之间都是独立的，每个进程均运行在其专用且受保护的内存空间内，拥有独立运行所需的全部资源。")]),t._v(" "),s("li",[t._v("进程可以分为系统进程和用户进程。凡是用于完成操作系统的各种功能的进程就是系统进程，它们就是处于运行状态下的操作系统本身；所有由用户启动的进程都是用户进程。")])]),t._v(" "),s("h4",{attrs:{id:"线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[t._v("#")]),t._v(" 线程")]),t._v(" "),s("ul",[s("li",[t._v("程序执行流的最小单元，线程是进程中的一个实体。")]),t._v(" "),s("li",[t._v("一个进程要想执行任务，必须至少有一条线程。应用程序启动的时候，系统会默认开启一条线程，也就是主线程。")])]),t._v(" "),s("h4",{attrs:{id:"进程和线程的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程的关系"}},[t._v("#")]),t._v(" 进程和线程的关系")]),t._v(" "),s("ul",[s("li",[t._v("线程是进程的执行单元，进程的所有任务都在线程中执行。")]),t._v(" "),s("li",[t._v("进程是 CPU 分配资源和调度的最小单位。")]),t._v(" "),s("li",[t._v("一个程序可以对应多个进程（多进程），一个进程中可有多个线程，但至少要有一条线程。")]),t._v(" "),s("li",[t._v("同一个进程内的线程共享进程资源。")])]),t._v(" "),s("h3",{attrs:{id:"多进程和多线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多进程和多线程"}},[t._v("#")]),t._v(" 多进程和多线程")]),t._v(" "),s("h4",{attrs:{id:"多进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多进程"}},[t._v("#")]),t._v(" 多进程")]),t._v(" "),s("ul",[s("li",[t._v("进程是程序在计算机上的一次执行活动。当你运行一个程序，你就启动了一个进程。显然，程序是死的（静态的），进程是活的（动态的）。")]),t._v(" "),s("li",[t._v("进程又被细化为线程，也就是一个进程下有多个能独立运行的更小的单位。在同一个时间里，同一个计算机系统中如果允许两个或者两个以上的进程处于运行状态，这便是多进程。")])]),t._v(" "),s("h4",{attrs:{id:"多线程-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程-2"}},[t._v("#")]),t._v(" 多线程")]),t._v(" "),s("ul",[s("li",[t._v("同一时间，CPU 只能处理一条线程，只有一条线程在执行。多线程并发执行，其实是 CPU 快速地在多条线程之间调度（切换）。如果 CPU 调度线程的时间足够快，就造成了多线程并发执行的假象。")]),t._v(" "),s("li",[t._v("如果线程非常多，CPU 会在多个线程之间调度，消耗大量的 CPU 资源，每条线程被调度执行的频次会降低（线程的执行效率降低）。")])]),t._v(" "),s("h3",{attrs:{id:"多线程优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程优缺点"}},[t._v("#")]),t._v(" 多线程优缺点")]),t._v(" "),s("h4",{attrs:{id:"多线程的优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程的优点"}},[t._v("#")]),t._v(" 多线程的优点")]),t._v(" "),s("ul",[s("li",[t._v("能适当提高程序的执行效率。")]),t._v(" "),s("li",[t._v("能适当提高资源的利用率（CPU、内存利用率）。")])]),t._v(" "),s("h4",{attrs:{id:"多线程的缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程的缺点"}},[t._v("#")]),t._v(" 多线程的缺点")]),t._v(" "),s("ul",[s("li",[t._v("开启线程需要占用一定的内存空间（默认情况下，主线程占用 1M ，子线程占用 512KB），如果开启大量的线程，会占用大量的内存空间，降低程序性能。")]),t._v(" "),s("li",[t._v("线程越多，CPU 在调度线程上的开销就越大。")]),t._v(" "),s("li",[t._v("程序设计的更加复杂：比如线程之间的通信、多线程的数据共享。")])]),t._v(" "),s("h3",{attrs:{id:"任务和队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#任务和队列"}},[t._v("#")]),t._v(" 任务和队列")]),t._v(" "),s("h4",{attrs:{id:"任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#任务"}},[t._v("#")]),t._v(" 任务")]),t._v(" "),s("p",[t._v("就是执行操作的意思，也就是在线程中执行的那段代码。在 GCD 中是放在 block 中的。执行任务有两种 方式：同步执行（sync）和异步执行（async）。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("同步(Sync)：")]),t._v(" 同步添加任务到指定的队列中，在添加的任务执行结束之前，会一直等待，直到队列里面的 任务完成之后再继续执行，即会阻塞线程。只能在当前线程中执行任务（是当前线程，不一定是主线程）， 不具备开启新线程的能力。")]),t._v(" "),s("li",[s("strong",[t._v("异步(Async)：")]),t._v(" 线程会立即返回，无需等待就会继续执行下面的任务，不阻塞当前线程。可以在新的线程中 执行任务，具备开启新线程的能力（并不一定开启新线程）。如果不是添加到主队列上，异步会在子线程中 执行任务。")])]),t._v(" "),s("h4",{attrs:{id:"队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[t._v("#")]),t._v(" 队列")]),t._v(" "),s("p",[t._v("这里的队列指执行任务的等待队列，即用来存放任务的队列。队列是一种特殊 的线性表，采用 FIFO（先进先出）的原则，即新任务总是被插入到队列的末尾，而读取任务的时候总是从 队列的头部开始读取。每读取一个任务，则从队列中释放一个任务 在 GCD 中有两种队列：串行队列和并发队列。两者都符合 FIFO（先进先出）的原则。两者的主要区别是： 执行顺序不同，以及开启线程数不同。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("串行队列（Serial Dispatch Queue）：")]),t._v(" 同一时间内，队列中只能执行一个任务，只有当前的任务执行完成之后，才能执行下一个任务。（只开启一个线程，一个任务执行完毕后，再执行下一个任务）。主队列是主线程上的一个串行队列,是 系统自动为我们创建的。")]),t._v(" "),s("li",[s("strong",[t._v("并发队列（Concurrent Dispatch Queue）：")]),t._v(" 同时允许多个任务并发执行。（可以开启多个线程，并且同时执行任务）。并发队列的并发功能只有 在异步（dispatch_async）函数下才有效。")])]),t._v(" "),s("h3",{attrs:{id:"gcd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gcd"}},[t._v("#")]),t._v(" GCD")]),t._v(" "),s("h3",{attrs:{id:"nsthread"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nsthread"}},[t._v("#")]),t._v(" NSThread")]),t._v(" "),s("h3",{attrs:{id:"nsopertion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nsopertion"}},[t._v("#")]),t._v(" NSOpertion")]),t._v(" "),s("h3",{attrs:{id:"对比-ios-中的多线程技术"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对比-ios-中的多线程技术"}},[t._v("#")]),t._v(" 对比 iOS 中的多线程技术")]),t._v(" "),s("h3",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),s("h2",{attrs:{id:"网络"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络"}},[t._v("#")]),t._v(" 网络")]),t._v(" "),s("h3",{attrs:{id:"http-和-https"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-和-https"}},[t._v("#")]),t._v(" HTTP 和  HTTPS")]),t._v(" "),s("h4",{attrs:{id:"http"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),s("p",[t._v("超文本传输协议，是一种用于分布式、协作式和超媒体信息系统的应用层协议。 简单来说就是一种发布和接收 HTML 页面的方法，被用于在 Web 浏览器和网站服务器之间传递信息。"),s("br"),t._v("\nHTTP 是基于 TCP 的应用层协议 (OSI 网络七层协议从上到下分别是 应用层、表示层、会话层 、传输层、网络层 、数据链路层、物理层）\n"),s("strong",[t._v("发展历史：")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("版本")]),t._v(" "),s("th",[t._v("产生时间")]),t._v(" "),s("th",[t._v("内容")]),t._v(" "),s("th",[t._v("发展现状")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("HTTP/0.9")]),t._v(" "),s("td",[t._v("1991")]),t._v(" "),s("td",[t._v("不涉及数据包传输，规定客户端和服务器之间通信格式，只能GET请求")]),t._v(" "),s("td",[t._v("没有作为正式的标准")])]),t._v(" "),s("tr",[s("td",[t._v("HTTP/1.0")]),t._v(" "),s("td",[t._v("1996")]),t._v(" "),s("td",[t._v("传输内容格式不限制，增加 PUT、PATCH、HEAD、 OPTIONS、DELETE 命令")]),t._v(" "),s("td",[t._v("正式作为标准")])]),t._v(" "),s("tr",[s("td",[t._v("HTTP/1.1")]),t._v(" "),s("td",[t._v("1997")]),t._v(" "),s("td",[t._v("持久连接(长连接)、节约带宽、HOST 域、管道机制、分块传输编码")]),t._v(" "),s("td",[t._v("2015年前使用最广泛")])]),t._v(" "),s("tr",[s("td",[t._v("HTTP/2")]),t._v(" "),s("td",[t._v("2015")]),t._v(" "),s("td",[t._v("多路复用、服务器推送、头信息压缩、二进制协议等")]),t._v(" "),s("td",[t._v("逐渐覆盖市场")])])])]),t._v(" "),s("h4",{attrs:{id:"https"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" HTTPS")]),t._v(" "),s("p",[t._v("超文本传输安全协议，是一种透过计算机网络进行安全通信的传输协议。HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包。HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。")]),t._v(" "),s("h4",{attrs:{id:"http-与-https-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-与-https-的区别"}},[t._v("#")]),t._v(" HTTP 与 HTTPS 的区别")]),t._v(" "),s("ul",[s("li",[t._v("HTTP 明文传输，数据都是未加密的，安全性较差，HTTPS（ SSL/TLS 协议+ HTTP ） 数据传输过程是加密的，安全性较好。")]),t._v(" "),s("li",[t._v("使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。证书颁发机构如：Symantec、Comodo、GoDaddy 和 GlobalSign 等。")]),t._v(" "),s("li",[t._v("HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS 除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。")]),t._v(" "),s("li",[t._v("HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。")]),t._v(" "),s("li",[t._v("HTTPS 其实就是建构在 SSL/TLS 之上的 HTTP 协议，所以，要比较 HTTPS 比 HTTP 要更耗费服务器资源。")])]),t._v(" "),s("h4",{attrs:{id:"http-请求常用的几种方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-请求常用的几种方式"}},[t._v("#")]),t._v(" HTTP 请求常用的几种方式")]),t._v(" "),s("ul",[s("li",[t._v("GET：获取指定资源。请求体中不会包含请求数据，请求数据放在协议头中。另外 GET 支持快取、缓存、可保留书签等。幂等。（幂等性是数学中的一个概念，表达的是N次变换与1次变换的结果相同）。")]),t._v(" "),s("li",[t._v("POST：向指定资源提交数据进行处理请求。比如提交表单、上传文件等，可能导致建立新的资源或者对原有资源的修改。提交的资源放在请求体中。不支持快取，非幂等。")]),t._v(" "),s("li",[t._v("HEAD：获取指定资源头部信息。")]),t._v(" "),s("li",[t._v("PUT：替换指定资源（不支持浏览器操作）。")]),t._v(" "),s("li",[t._v("DELETE：删除指定资源。")])]),t._v(" "),s("h4",{attrs:{id:"post-与-get-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#post-与-get-的区别"}},[t._v("#")]),t._v(" POST 与 GET 的区别")]),t._v(" "),s("ul",[s("li",[t._v("GET 是从服务器上获取数据，POST 是向服务器传送数据。")]),t._v(" "),s("li",[t._v("GET 请求会被浏览器主动cache，POST 不会，除非手动设置。")]),t._v(" "),s("li",[t._v("GET 请求只能进行 URL 编码，POST 支持多种编码方式。")]),t._v(" "),s("li",[t._v("GET 请求参数会被完整保留在浏览器历史记录里，POST 中的参数不会被保留。")]),t._v(" "),s("li",[t._v("GET 只接受 ASCII 字符的参数的数据类型，POST 没有限制。")]),t._v(" "),s("li",[t._v("GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息。")])]),t._v(" "),s("h3",{attrs:{id:"tcp-和-udp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-和-udp"}},[t._v("#")]),t._v(" TCP 和 UDP")]),t._v(" "),s("h4",{attrs:{id:"tcp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[t._v("#")]),t._v(" TCP")]),t._v(" "),s("p",[t._v("TCP（Transmission Control Protocol，传输控制协议）：传输控制协议，提供的是面向连接、可靠的字节流服务。当客户和服务器彼此交换数据前，必须现在双方之间建立一个 TCP 连接，一个 TCP 连接必须经过“三次握手”才能建立起来，之后才能传输数据。TCP 提供超时重发、丢弃重复数据、检验数据、流量控制等功能，保证数据能从一端传到另一端。")]),t._v(" "),s("h4",{attrs:{id:"udp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp"}},[t._v("#")]),t._v(" UDP")]),t._v(" "),s("p",[t._v("UDP（User Data Protocol，用户数据报协议）：用户数据报协议，是一个简单的面向数据报的运输层协议。UDP 适用于一次只传送少量数据、对可靠性要求不好的应用环境。UDP 提不同可靠性，它只是把应用程式传给 IP 层的数据报发送出去，但是并不能保证它们能到达目的地。由于 UDP 在传输数据报前不用在客户端和服务器之间建立一个连接，且没有超时重发等机制，故而传输速度很快。")]),t._v(" "),s("h4",{attrs:{id:"tcp-和-udp-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-和-udp-的区别"}},[t._v("#")]),t._v(" TCP 和 UDP 的区别")]),t._v(" "),s("ul",[s("li",[t._v("TCP 是面向连接，UDP 是非面向连接（ UPD 传输数据前不需要先建立连接）。")]),t._v(" "),s("li",[t._v("TCP 传输可靠，UDP 传输不可靠。")]),t._v(" "),s("li",[t._v("TCP 保证数据顺序， UDP 不保证数据顺序。")])]),t._v(" "),s("h3",{attrs:{id:"三次握手和四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三次握手和四次挥手"}},[t._v("#")]),t._v(" 三次握手和四次挥手")]),t._v(" "),s("h4",{attrs:{id:"三次握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[t._v("#")]),t._v(" 三次握手")]),t._v(" "),s("p",[s("strong",[t._v("第一次握手：")]),t._v(" 建立连接时，客户端发送 SYN 包（ syn = j ）到服务器，并进入 SYN_SEND 状态，等待服务器确认。"),s("br"),t._v(" "),s("strong",[t._v("第二次握手：")]),t._v(" 服务器收到 SYN 包，必须确认客户的 SYN（ ack = j + 1 ），同时自己也发送一个 SYN 包 （ syn = k ），即 SYN + ACK 包，此时服务器进入 SYN_RECV 状态。"),s("br"),t._v(" "),s("strong",[t._v("第三次握手：")]),t._v(" 客户端收到服务器的 SYN + ACK 包，向服务器发送确认包 ACK（ ack = k + 1），此包发送完毕，客户端和服务器进入 ESTABLISHED 状态，完成三次握手。")]),t._v(" "),s("h4",{attrs:{id:"四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[t._v("#")]),t._v(" 四次挥手")]),t._v(" "),s("p",[s("strong",[t._v("第一次挥手：")]),t._v(" 客户应用进程发出一个关闭连接的指令。会引起客户端 TCP 向服务端发送一个特殊的 TCP 报文段。该 报文段即是将首部的一个标志位 FIN 比特置为 1。同时，客户端进入 FIN_WAIT_1 状态，等待服务端的带有确认的 TCP 报文段。"),s("br"),t._v(" "),s("strong",[t._v("第二次挥手：")]),t._v(" 收到该报文段后会向客户端发送一个确认报文段。服务端 TCP 进入 CLOSE_WAIT 状态，对应客户端的 TIME_WAIT，表示被动关闭。客户端收到该报文段后，进入 FIN_WAIT_2 状态，等待服务端的 FIN 比特置为 1 的报文段。"),s("br"),t._v(" "),s("strong",[t._v("第三次挥手：")]),t._v(" 服务端发送自己的终止报文段，同样是把报文段首部的标志位 FIN 比特置为 1。服务端 TCP 进入 LAST_ACK 状态，等待服务端最后的确认报文段。"),s("br"),t._v(" "),s("strong",[t._v("第四次挥手：")]),t._v(" 客户端收到服务端的终止报文段后，向服务端发送一个确认报文段。同时，客户端进入 TIME_WAIT 状态。假如 ACK 丢失，TIME_WAIT 状态使 TCP 客户重传最后的确认报文，TIME_WAIT 通常会等待 2MSL （Maximum Segment Lifetime 最长报文段寿命）。经过等待后，连接就正式关闭，重新进入 CLOSED 状态，客户端所有资源将被释放。服务端收到该报文段后，同样也会关闭，重新进入 CLOSED 状态，释放所有服务端 TCP 资源。")]),t._v(" "),s("h4",{attrs:{id:"为什么建立连接只用三次握手-而断开连接却要四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么建立连接只用三次握手-而断开连接却要四次挥手"}},[t._v("#")]),t._v(" 为什么建立连接只用三次握手，而断开连接却要四次挥手？")]),t._v(" "),s("p",[t._v("服务端的 FIN 和 ACK 需要分开发，并不是像三次握手中那样，SYN 可以和 ACK 同步发，所以就需要四次挥手。")]),t._v(" "),s("h4",{attrs:{id:"在四次挥手中-客户端为什么在-time-wait-后必须等待-2msl-时间呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在四次挥手中-客户端为什么在-time-wait-后必须等待-2msl-时间呢"}},[t._v("#")]),t._v(" 在四次挥手中，客户端为什么在 TIME_WAIT 后必须等待 2MSL 时间呢？")]),t._v(" "),s("p",[t._v("为了保证客户端发送的最后一个 ACK 报文段能够到达服务端。")]),t._v(" "),s("h2",{attrs:{id:"ios-中的加密"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ios-中的加密"}},[t._v("#")]),t._v(" iOS 中的加密")]),t._v(" "),s("h3",{attrs:{id:"base64编码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#base64编码"}},[t._v("#")]),t._v(" Base64编码")]),t._v(" "),s("p",[t._v("Base64编码要求把3个8位字节（3"),s("em",[t._v("8=24）转化为4个6位的字节（4")]),t._v("6=24），之后在6位的前面补两个0，形成8位一个字节的形式。 如果剩下的字符不足3个字节，则用0填充，输出字符使用'='，因此编码后输出的文本末尾可能会出现1或2个'='。"),s("br"),t._v("\nBase64编码为转码，不是加密方式，只为数据存储容易和方便网络传输的一种数据处理方式。")]),t._v(" "),s("div",{staticClass:"language-objc extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objc"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// base64编码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// @param string 字符串")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("base64Encoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("string "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// UTF8编码二进制数据")]),t._v("\n    NSData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("string dataUsingEncoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("NSUTF8StringEncoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编码后的字符串")]),t._v("\n    NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("base64String "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("data base64EncodedStringWithOptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("NSDataBase64Encoding64CharacterLineLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"%@ base64编码后：%@"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("base64String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" base64String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// base64解码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// @param string 字符串")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("base64Decoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("string "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解码")]),t._v("\n    NSData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("base64Data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSData alloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" initWithBase64EncodedString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("string options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("NSDataBase64DecodingIgnoreUnknownCharacters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二进制转换")]),t._v("\n    NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("decodingSting "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSString alloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" initWithData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("base64Data encoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("NSUTF8StringEncoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"%@ base64解码后：%@"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("decodingSting"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" decodingSting"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// base64编码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// @param string 字符串")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("fileBase64Encoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("string "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// http://img.kelijun.com/naixiangmalatang_003.jpg")]),t._v("\n    NSURL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("url "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSURL URLWithString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需要加密的二进制数据")]),t._v("\n    NSData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSData alloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" initWithContentsOfURL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    // 编码后的二进制数据")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    NSData *base64Data = [data base64EncodedDataWithOptions:NSDataBase64Encoding64CharacterLineLength];")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编码后的字符串")]),t._v("\n    NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("base64String "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("data base64EncodedStringWithOptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("NSDataBase64Encoding64CharacterLineLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" fileBase64Decoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("base64String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"%@ base64编码后：%@"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("base64String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" base64String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// base64解码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// @param string 字符串")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("fileBase64Decoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("string "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解码后的二进制数据")]),t._v("\n    NSData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("decodingData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSData alloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" initWithBase64EncodedString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("string options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("NSDataBase64DecodingIgnoreUnknownCharacters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    // 解码后的二进制数据")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    NSData *decodingData = [[NSData alloc] initWithBase64EncodedData:data options:NSDataBase64DecodingIgnoreUnknownCharacters];")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" decodingData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"对称加密"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对称加密"}},[t._v("#")]),t._v(" 对称加密")]),t._v(" "),s("p",[t._v("用同一套密钥来进行加密解密。对称加密通常有 DES、AES、IDEA、3DES 加密算法。")]),t._v(" "),s("h4",{attrs:{id:"des-data-encryption-standard"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#des-data-encryption-standard"}},[t._v("#")]),t._v(" DES（Data Encryption Standard）")]),t._v(" "),s("p",[t._v("DES 密码体制的安全性不依赖于算法的保密，其安全性以加密密钥的保密为基础。DES 算法的入口参数有三个：Key、Data、Mode。其中 Key 为8个字节共64位，是 DES 算法的工作密钥；Data 也为8个字节64位，是要被加密或被解密的数据；Mode 为 DES 的工作方式，有两种：加密或解密。")]),t._v(" "),s("h4",{attrs:{id:"aes-the-advanced-encryption-standard"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aes-the-advanced-encryption-standard"}},[t._v("#")]),t._v(" AES（The Advanced Encryption Standard）")]),t._v(" "),s("p",[t._v("AES 算法是基于置换和代替的。置换是数据的重新排列，而代替是用一个单元数据替换另一个。")]),t._v(" "),s("h4",{attrs:{id:"_3des-triple-data-encryption-algorithm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3des-triple-data-encryption-algorithm"}},[t._v("#")]),t._v(" 3DES（Triple Data Encryption Algorithm）")]),t._v(" "),s("p",[t._v("它相当于是对每个数据块应用三次 DES 加密算法。")]),t._v(" "),s("h4",{attrs:{id:"idea-international-data-encryption-algorithm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#idea-international-data-encryption-algorithm"}},[t._v("#")]),t._v(" IDEA（International Data Encryption Algorithm）")]),t._v(" "),s("p",[t._v("在 DES 算法的基础上发展出来的，类似于 3DES 。IDEA 是作为迭代的分组密码实现的，使用128位的密钥和8个循环。")]),t._v(" "),s("h3",{attrs:{id:"非对称加密"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非对称加密"}},[t._v("#")]),t._v(" 非对称加密")]),t._v(" "),s("p",[t._v("用公钥和私钥来加解密的算法。"),s("br"),t._v("\n公钥（Public Key）与私钥（Private Key）是通过一种算法得到的一个密钥对（即一个公钥和一个私钥）， 公钥是密钥对中公开的部分，私钥则是非公开的部分,私钥通常是保存在本地。")]),t._v(" "),s("ul",[s("li",[t._v("用公钥进行加密，就要用私钥进行解密；反之，用私钥加密，就要用公钥进行解密（数字签名）。")]),t._v(" "),s("li",[t._v("由于私钥是保存在本地的，所以非对称加密相对与对称加密是安全的。 但非对称加密比对称加密耗时(100 倍以上),所以通常要结合对称加密来使用。\n常见的非对称加密算法有：RSA、ECC（移动设备用）、Diffie-Hellman、El Gamal、DSA（数字签名用）。   而为了确保客户端能够确认公钥就是想要访问的网站的公钥，引入了数字证书的概念，由于证书存在一级 一级的签发过程，所以就出现了证书链，在证书链中的顶端的就是根 CA。")])]),t._v(" "),s("h4",{attrs:{id:"rsa-the-advanced-encryption-standard"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rsa-the-advanced-encryption-standard"}},[t._v("#")]),t._v(" RSA（The Advanced Encryption Standard）")]),t._v(" "),s("h3",{attrs:{id:"哈希算法加密"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希算法加密"}},[t._v("#")]),t._v(" 哈希算法加密")]),t._v(" "),s("h4",{attrs:{id:"md5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#md5"}},[t._v("#")]),t._v(" MD5")]),t._v(" "),s("p",[t._v("输入不定长度信息，输出固定长度128-bits的算法。经过程序流程，生成四个32位数据，最后联合起来成为一个128-bits散列。基本方式为，求余、取余、调整长度、与链接变量进行循环运算。得出结果。")]),t._v(" "),s("div",{staticClass:"language-objc extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objc"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// MD5加密")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// @param string 需要加密的字符")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("getMD5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("string "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要进行UTF8的转码")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" input "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("string UTF8String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" digest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("CC_MD5_DIGEST_LENGTH"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CC_MD5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CC_LONG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" digest "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    NSMutableString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("output "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSMutableString stringWithCapacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("CC_MD5_DIGEST_LENGTH "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" CC_MD5_DIGEST_LENGTH"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("output appendFormat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"%02x"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" digest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("  output"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"sha"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sha"}},[t._v("#")]),t._v(" SHA")]),t._v(" "),s("p",[t._v("安全哈希算法（Secure Hash Algorithm）主要适用于数字签名标准（Digital Signature Standard DSS）里面定义的数字签名算法（Digital Signature Algorithm DSA）。对于长度小于2^64位的消息，SHA1会产生一个160位的消息摘要。当接收到消息的时候，这个消息摘要可以用来验证数据的完整性。在传输的过程中，数据很可能会发生变化，那么这时候就会产生不同的消息摘要。当让除了SHA1还有SHA256以及SHA512等。")]),t._v(" "),s("h4",{attrs:{id:"hmac"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hmac"}},[t._v("#")]),t._v(" HMAC")]),t._v(" "),s("p",[t._v("给定一个密钥，对明文加密，做两次“散列”，得到的结果还是32为字符串。在实际开发中，密钥是服务器生成，客户端发送请求会拿到KEY，一个账号对应一个KEY。")]),t._v(" "),s("h3",{attrs:{id:"nsarray-与-nsset-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nsarray-与-nsset-的区别"}},[t._v("#")]),t._v(" NSArray 与 NSSet 的区别")]),t._v(" "),s("ul",[s("li",[t._v("NSArray 内存中储存地址连续，NSSet 不连续。")]),t._v(" "),s("li",[t._v("NSArray 查找需要遍历，NSSet 效率高，内部使用 hash 查找。")]),t._v(" "),s("li",[t._v("NSArray 通过下标访问，NSSet 通过 anyObject 访问元素。")])]),t._v(" "),s("h3",{attrs:{id:"nshashtable-与-nsmaptable-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nshashtable-与-nsmaptable-的区别"}},[t._v("#")]),t._v(" NSHashTable 与 NSMapTable 的区别")]),t._v(" "),s("ul",[s("li",[t._v("NSHashTable 是 NSSet 的通用版本，对元素弱引用，可变类型，可以在访问成员时 copy。")]),t._v(" "),s("li",[t._v("NSMapTable 是 NSDictionary 的通用版本，对元素弱引用，可变类型；可以在访问成员时 copy.")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("NSHashTable与NSSet的区别：NSHashTable可以通过option设置元素弱引用/copyin，只有可变类型。但是添加对象的时候NSHashTable耗费时间是NSSet的两倍。\nNSMapTable与NSDictionary的区别：同上")])]),t._v(" "),s("h3",{attrs:{id:"属性关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性关键字"}},[t._v("#")]),t._v(" 属性关键字")]),t._v(" "),s("h3",{attrs:{id:"arc-默认的关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arc-默认的关键字"}},[t._v("#")]),t._v(" ARC 默认的关键字")]),t._v(" "),s("p",[t._v("普通 OC 对象：atomic strong readwrite。"),s("br"),t._v("\n基本数据类型： atomic assign readwrite。")]),t._v(" "),s("h3",{attrs:{id:"什么情况下使用-weak-关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么情况下使用-weak-关键字"}},[t._v("#")]),t._v(" 什么情况下使用 weak 关键字？")]),t._v(" "),s("ul",[s("li",[t._v("ARC 中可能出现循环引用，比如 delegate 。")]),t._v(" "),s("li",[t._v("自定义 IBOutlet 控件属性一般也适用 weak。")])]),t._v(" "),s("h3",{attrs:{id:"可能出现循环引用的地方有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可能出现循环引用的地方有哪些"}},[t._v("#")]),t._v(" 可能出现循环引用的地方有哪些？")]),t._v(" "),s("ul",[s("li",[t._v("delegate：ARC 中使用 weak，MRC 中使用 assign。")]),t._v(" "),s("li",[t._v("block：某个类将 block 作为自己的的属性变量，该类在 block 中又使用了该类本身。通俗来讲就是该类持有 block，block 持有该类。可用 __weak 修饰该类解决循环引用。")]),t._v(" "),s("li",[t._v("NSTimer：NSTimer 作为某个类的属性变量，而 NSTimer 初始化时要指定 self 为 target ，容易造成循环引用。若 NSTimer 一直处于 validate 状态下，则其引用计数一直大于0，因此在不使用定时器以后，应先调用 invalidate 方法。")])]),t._v(" "),s("h3",{attrs:{id:"weak-跟-assign-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#weak-跟-assign-的区别"}},[t._v("#")]),t._v(" weak 跟 assign 的区别")]),t._v(" "),s("p",[t._v("weak 表明一种非持有关系，必须用于 OC 对象；assign 用于基本数据类型，也可以用于 OC 对象。")]),t._v(" "),s("h4",{attrs:{id:"oc-的优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oc-的优点"}},[t._v("#")]),t._v(" OC 的优点")]),t._v(" "),s("ol",[s("li",[t._v("Cateogies")]),t._v(" "),s("li",[t._v("Posing")]),t._v(" "),s("li",[t._v("动态识别")]),t._v(" "),s("li",[t._v("指标计算")]),t._v(" "),s("li",[t._v("不是一个过度复杂的 C 衍生语言")]),t._v(" "),s("li",[t._v("OC 可以与 C++ 混编")])]),t._v(" "),s("h4",{attrs:{id:"oc-的缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oc-的缺点"}},[t._v("#")]),t._v(" OC 的缺点")]),t._v(" "),s("ol",[s("li",[t._v("不支援命名空间")]),t._v(" "),s("li",[t._v("不支持多重继承")]),t._v(" "),s("li",[t._v("不支持运算符重载")]),t._v(" "),s("li",[t._v("使用动态运行时类型，所有的方法都是函数调用，所以很多编译时优化方法都用不到，如内联函数等，性能低劣。")])]),t._v(" "),s("h4",{attrs:{id:"oc-的三大特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oc-的三大特性"}},[t._v("#")]),t._v(" OC 的三大特性")]),t._v(" "),s("p",[t._v("封装 分类 继承")]),t._v(" "),s("h4",{attrs:{id:"swift-的优势-oc-的劣势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#swift-的优势-oc-的劣势"}},[t._v("#")]),t._v(" Swift 的优势 OC 的劣势")]),t._v(" "),s("ol",[s("li",[t._v("Swift 语法和文件结构简易化，文件分离后结构更清晰。")]),t._v(" "),s("li",[t._v("Swift更加安全，它是类型安全的语言。")]),t._v(" "),s("li",[t._v("Swift速度更快，运算性能更高。")]),t._v(" "),s("li",[t._v("不像C语言和OC语言一样都必须有一个主函数main()作为程序的入口, swift程序从第一句开始向下顺序执行, 一直到最后。")])]),t._v(" "),s("h4",{attrs:{id:"swift-的劣势-oc的优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#swift-的劣势-oc的优势"}},[t._v("#")]),t._v(" Swift 的劣势 OC的优势")]),t._v(" "),s("ol",[s("li",[t._v("不稳定")]),t._v(" "),s("li",[t._v("Runtime对Swift支持不太友好屏蔽了好多下层Api")])]),t._v(" "),s("h4",{attrs:{id:"kvo-与-kvc-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kvo-与-kvc-的区别"}},[t._v("#")]),t._v(" KVO 与 KVC 的区别")]),t._v(" "),s("p",[t._v("KVO键值观察机制。一对多，观察者模式，提供观察某一属性变化的方法。KVO基于KVC。\nKVC：键值编码，是一个通过属性名访问对象的属性。")]),t._v(" "),s("h4",{attrs:{id:"简述-notification、kvc、kvo、delegate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简述-notification、kvc、kvo、delegate"}},[t._v("#")]),t._v(" 简述 Notification、KVC、KVO、delegate")]),t._v(" "),s("p",[t._v("KVO：键值观察机制。一对多，观察者模式，提供观察某一属性变化的方法。\nKVC：键值编码。一个对象在调用 setValue 时：")]),t._v(" "),s("ol",[s("li",[t._v("检查是否存在对应key的set方法，存在就调用 set 方法。")]),t._v(" "),s("li",[t._v("set 方法不存在，就查找 _key 的成员变量是否存在，存在就直接赋值。")]),t._v(" "),s("li",[t._v("如果 _key 没有找到，就查找相同名称的 key ，存在就赋值。")]),t._v(" "),s("li",[t._v("如果都没有找到，就调用 valueForUndefinedKey 方法 和 setValue:forUndefinedKey 方法。\ndelegate：发送和接收者的关系是直接、一对一的关系。\nNotification：观察者模式，发送者和接受者的关系是间接、多对多的关系。\ndelegate 的效率比 Notification 高\nNotification 更直接，需要关注返回值，常带有 should 关键字。Notification 不关心结果，常带有 did 关键字。")])]),t._v(" "),s("h4",{attrs:{id:"自动释放池什么时候释放"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动释放池什么时候释放"}},[t._v("#")]),t._v(" 自动释放池什么时候释放？")]),t._v(" "),s("p",[t._v("第一次创建：Runloop 启动的时候 。"),s("br"),t._v("\n最后一次销毁：Runloop 退出的时候。"),s("br"),t._v("\n其它时候的创建和销毁：Runloop 即将睡眠时销毁之前的释放池，重新创建一个新的。")]),t._v(" "),s("h4",{attrs:{id:"什么情况下使用weak关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么情况下使用weak关键字"}},[t._v("#")]),t._v(" 什么情况下使用weak关键字？")]),t._v(" "),s("p",[t._v("ARC 中，可能出现循环引用的地方 ，比如：delegate 。"),s("br"),t._v("\n自定义 IBOutlet 控件属性一般也使用 weak。")]),t._v(" "),s("h4",{attrs:{id:"可能出现循环引用的地方有哪些-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可能出现循环引用的地方有哪些-2"}},[t._v("#")]),t._v(" 可能出现循环引用的地方有哪些？")]),t._v(" "),s("p",[t._v("delegate：ARC 中使用 weak，MRC 中使用 assign。"),s("br"),t._v("\nblock：某个类将 block 作为自己的属性变量，该类在 block 中又使用了该类本身。通俗来说就是该类持有 blcok ， block 持有该类。可用 __weak 修饰该类解决循环引用。"),s("br"),t._v("\nNSTimer：NSTimer 作为某个类的属性变量，而 NSTimer 初始化时要指定 self 为 target ，容易造成循环引用。若 NSTimer 一直处于 validate 状态下，则其引用计数一直大于0，因此在不使用定时器以后，应先调用 invalidate 方法。")]),t._v(" "),s("h4",{attrs:{id:"怎么用-copy-关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么用-copy-关键字"}},[t._v("#")]),t._v(" 怎么用 copy 关键字？")]),t._v(" "),s("p",[t._v("NSString、NSArray、NSDictionary等等经常使用copy关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary，为确保对象中的属性值不会无意间变动，应该在设置新属性值时拷贝一份，保护其封装性。"),s("br"),t._v("\nblock 也经常使用copy关键字，block 使用 copy 是从 MRC 遗留下来的“传统”。在 MRC 中，方法内部的 block 是在栈区的,使用 copy 可以把它放到堆区。在ARC中写不写都行：对于 block 使用 copy 还是 strong 效果是一样的，但是建议写上copy，因为这样显示告知调用者“编译器会自动对 block 进行了 copy 操作”")]),t._v(" "),s("h4",{attrs:{id:"如何让自己写的对象有拷贝功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何让自己写的对象有拷贝功能"}},[t._v("#")]),t._v(" 如何让自己写的对象有拷贝功能？")]),t._v(" "),s("p",[t._v("遵从 NSCopying 协议或者 NSMutableCopying 协议，实现该协议 - (id)copyWitZone:(NSZone *)zone;")]),t._v(" "),s("h4",{attrs:{id:"对象添加到通知中-当通知中心发出通知时-这个对象却已经被释放了-可能会出现什么问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象添加到通知中-当通知中心发出通知时-这个对象却已经被释放了-可能会出现什么问题"}},[t._v("#")]),t._v(" 对象添加到通知中，当通知中心发出通知时，这个对象却已经被释放了，可能会出现什么问题？")]),t._v(" "),s("p",[t._v("若在对象销毁前不把对象从通知中心移除，当发送通知时，程序会崩溃。在对象添加到通知中心后，一定要在释放前移除。")]),t._v(" "),s("h4",{attrs:{id:"property-的本质是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#property-的本质是什么"}},[t._v("#")]),t._v(" @property 的本质是什么？")]),t._v(" "),s("p",[t._v("@property = ivar + getter + setter;")]),t._v(" "),s("h4",{attrs:{id:"ivar、getter、setter-是如何生成并添加到这个类中的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ivar、getter、setter-是如何生成并添加到这个类中的"}},[t._v("#")]),t._v(" ivar、getter、setter 是如何生成并添加到这个类中的？")]),t._v(" "),s("p",[t._v("在编译期自动生成 getter、setter ，还自动向类中添加适当的实例变量，也可以用 @synthesize 语法来指定实例变量的名字。")]),t._v(" "),s("h4",{attrs:{id:"protocol-和-category-中如何使用-property"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#protocol-和-category-中如何使用-property"}},[t._v("#")]),t._v(" @protocol 和 category 中如何使用 @property？")]),t._v(" "),s("p",[t._v("在 protocol 中使用 property 只会生成 setter 和 getter 方法声明,我们使用属性的目的,是希望遵守我协议的对象能实现该属性；"),s("br"),t._v("\ncategory 使用 @property 也是只会生成 setter 和 getter 方法的声明,如果我们真的需要给 category 增加属性的实现,需要借助于运行时的两个函数：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("objc_setAssociatedObject \nobjc_getAssociatedObject\n")])])]),s("h4",{attrs:{id:"id-和-nil-代表什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#id-和-nil-代表什么"}},[t._v("#")]),t._v(" id 和 nil 代表什么？")]),t._v(" "),s("p",[t._v("id 类型的指针可以指向任何 OC 对象。"),s("br"),t._v("\nnil 代表空值（空指针的值，0）。")]),t._v(" "),s("p",[t._v("property")]),t._v(" "),s("h4",{attrs:{id:"atomic"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#atomic"}},[t._v("#")]),t._v(" atomic")]),t._v(" "),s("ul",[s("li",[t._v("保证数据只能被一个线程占用，也就是说线程对属性进行写操作时，会使用自旋锁锁住该属性，不允许其它的线程对其进行操作。")]),t._v(" "),s("li",[t._v("自旋锁会对getter/setter方法会进行加锁操作，仅仅保证getter/setter方法的线程安全，方法之外的线程安全还是要靠自己处理。")]),t._v(" "),s("li",[t._v("原子属性采用的是多读单写机制的多线程策略，多读单写缩小了锁的范围，比互斥锁的性能好。规定只能在主线程中更新UI，就是因为如果在多线程中更新UI，就需要给UI加锁，防止抢占资源写入错误，但这样降低性能，所以iOS的设计让所有的UI对象都是非线程安全的（不加锁），并规定只能在主线程中更新UI，避免多线程抢占资源问题。")])]),t._v(" "),s("h4",{attrs:{id:"nonatomic"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nonatomic"}},[t._v("#")]),t._v(" nonatomic")]),t._v(" "),s("h4",{attrs:{id:"strong"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strong"}},[t._v("#")]),t._v(" strong")]),t._v(" "),s("h4",{attrs:{id:"weak"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#weak"}},[t._v("#")]),t._v(" weak")]),t._v(" "),s("h4",{attrs:{id:"assgin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assgin"}},[t._v("#")]),t._v(" assgin")]),t._v(" "),s("h4",{attrs:{id:"copy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#copy"}},[t._v("#")]),t._v(" copy")]),t._v(" "),s("h4",{attrs:{id:"retain"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#retain"}},[t._v("#")]),t._v(" retain")]),t._v(" "),s("h4",{attrs:{id:"unsafe-unretained"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unsafe-unretained"}},[t._v("#")]),t._v(" unsafe_unretained")]),t._v(" "),s("h4",{attrs:{id:"readonly"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#readonly"}},[t._v("#")]),t._v(" readonly")]),t._v(" "),s("h4",{attrs:{id:"readwrite"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#readwrite"}},[t._v("#")]),t._v(" readwrite")]),t._v(" "),s("h4",{attrs:{id:"简述-nil、nil、null、nsnull"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简述-nil、nil、null、nsnull"}},[t._v("#")]),t._v(" 简述 nil、Nil、NULL、NSNull")]),t._v(" "),s("p",[t._v("nil、Nil、NULL 都表示（void *）0；NSNull 继承于 NSObject，很特殊的类，表示空，什么也不储存，但它却是对象，只是一个占位对象。使用场景：比如服务端接口让传空，[NSNull null]")]),t._v(" "),s("h4",{attrs:{id:"nil、nil、null、nsnull的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nil、nil、null、nsnull的区别"}},[t._v("#")]),t._v(" nil、Nil、NULL、NSNull的区别？")]),t._v(" "),s("p",[t._v("nil 指向一个对象的空指针。"),s("br"),t._v("\nNil 指向一个类的空指针。"),s("br"),t._v("\nNULL 在 C 语言中表示空指针。"),s("br"),t._v("\nNSNull 表示空值的对象。")])])}),[],!1,null,null,null);a.default=n.exports}}]);